#ifndef kernel_h
#define kernel_h
#include <types.h>

class Kernel {
private:
  real DMAX;

protected:
  vect   X0;
  real   R0;
  B_iter B0, BN;
  C_iter C0, CN;

private:
  real getBmax(vect const&X, C_iter C) {
    real rad = C->R;
    real dx = rad+std::abs(X[0]-C->X[0]);
    real dy = rad+std::abs(X[1]-C->X[1]);
    real dz = rad+std::abs(X[2]-C->X[2]);
    return std::sqrt( dx*dx + dy*dy + dz*dz );
  }

public:
  Kernel() : X0(0), R0(0) {}

  ~Kernel() {}

  void setCenter(C_iter C) {
    DMAX = 0;
    real m = 0;
    vect X = 0;
    for( B_iter B=C->LEAF; B!=C->LEAF+C->NCLEAF; ++B ) {
      m += B->SRC[0];
      X += B->X * B->SRC[0];
    }
    for( C_iter c=C0+C->CHILD; c!=C0+C->CHILD+C->NCHILD; ++c ) {
      m += c->M[0];
      X += c->X * c->M[0];
    }
    X /= m;
    C->R = getBmax(X,C);
    C->X = X;
  }

  void P2P(C_iter CI, C_iter CJ, bool mutual=true) const {
    for( B_iter BI=CI->LEAF; BI!=CI->LEAF+CI->NDLEAF; ++BI ) {
      real P0 = 0;
      vect F0 = 0;
      for( B_iter BJ=CJ->LEAF; BJ!=CJ->LEAF+CJ->NDLEAF; ++BJ ) {
        vect dR = BI->X - BJ->X;
        real D1 = norm(dR) + EPS2;
        real D0 = BI->SRC[0] * BJ->SRC[0];
        real XX = 1.0/D1;
        D0 *= std::sqrt(XX);
        D1  = XX * D0;
        dR *= D1;
        P0 -= D0;
        F0 -= dR;
        BJ->TRG[0] -= D0 * mutual;
        BJ->TRG[1] += dR[0] * mutual;
        BJ->TRG[2] += dR[1] * mutual;
        BJ->TRG[3] += dR[2] * mutual;
      }
      BI->TRG[0] += P0;
      BI->TRG[1] += F0[0];
      BI->TRG[2] += F0[1];
      BI->TRG[3] += F0[2];
    }
  }

  void P2P(C_iter C) const {
    unsigned NJ = C->NDLEAF;
    for( B_iter BI=C->LEAF; BI!=C->LEAF+C->NDLEAF; ++BI, --NJ ) {
      real P0 = 0;
      vect F0 = 0;
      for( B_iter BJ=BI+1; BJ!=BI+NJ; ++BJ ) {
        vect dR = BI->X - BJ->X;
        real D1 = norm(dR) + EPS2;
        real D0 = BI->SRC[0] * BJ->SRC[0];
        real XX = 1.0/D1;
        D0 *= std::sqrt(XX);
        D1  = XX * D0;
        dR *= D1;
        P0 -= D0;
        F0 -= dR;
        BJ->TRG[0] -= D0;
        BJ->TRG[1] += dR[0];
        BJ->TRG[2] += dR[1];
        BJ->TRG[3] += dR[2];
      }
      BI->TRG[0] += P0;
      BI->TRG[1] += F0[0];
      BI->TRG[2] += F0[1];
      BI->TRG[3] += F0[2];
    }
  }

  void P2M(C_iter C) {
    for( B_iter B=C->LEAF; B!=C->LEAF+C->NCLEAF; ++B ) {
      vect dist = C->X - B->X;
      real R = std::sqrt(norm(dist));
      if( R > DMAX ) DMAX = R;
      Mset M;
      M[0] = B->SRC[0];

      M[1] = M[0] * dist[0];
      M[2] = M[0] * dist[1];
      M[3] = M[0] * dist[2];

      M[4] = M[1] * dist[0] / 2;
      M[5] = M[2] * dist[0];
      M[6] = M[3] * dist[0];
      M[7] = M[2] * dist[1] / 2;
      M[8] = M[3] * dist[1];
      M[9] = M[3] * dist[2] / 2;

      M[10] = M[4] * dist[0] / 3;
      M[11] = M[5] * dist[0] / 2;
      M[12] = M[6] * dist[0] / 2;
      M[13] = M[7] * dist[0];
      M[14] = M[8] * dist[0];
      M[15] = M[9] * dist[0];
      M[16] = M[7] * dist[1] / 3;
      M[17] = M[8] * dist[1] / 2;
      M[18] = M[9] * dist[1];
      M[19] = M[9] * dist[2] / 3;

/*
      M[20] = M[10] * dist[0] / 4;
      M[21] = M[11] * dist[0] / 3;
      M[22] = M[12] * dist[0] / 3;
      M[23] = M[13] * dist[0] / 2;
      M[24] = M[14] * dist[0] / 2;
      M[25] = M[15] * dist[0] / 2;
      M[26] = M[16] * dist[0];
      M[27] = M[17] * dist[0];
      M[28] = M[18] * dist[0];
      M[29] = M[19] * dist[0];
      M[30] = M[16] * dist[1] / 4;
      M[31] = M[17] * dist[1] / 3;
      M[32] = M[18] * dist[1] / 2;
      M[33] = M[19] * dist[1];
      M[34] = M[19] * dist[2] / 4;

      M[35] = M[20] * dist[0] / 5;
      M[36] = M[21] * dist[0] / 4;
      M[37] = M[22] * dist[0] / 4;
      M[38] = M[23] * dist[0] / 3;
      M[39] = M[24] * dist[0] / 3;
      M[40] = M[25] * dist[0] / 3;
      M[41] = M[26] * dist[0] / 2;
      M[42] = M[27] * dist[0] / 2;
      M[43] = M[28] * dist[0] / 2;
      M[44] = M[29] * dist[0] / 2;
      M[45] = M[30] * dist[0];
      M[46] = M[31] * dist[0];
      M[47] = M[32] * dist[0];
      M[48] = M[33] * dist[0];
      M[49] = M[34] * dist[0];
      M[50] = M[30] * dist[1] / 5;
      M[51] = M[31] * dist[1] / 4;
      M[52] = M[32] * dist[1] / 3;
      M[53] = M[33] * dist[1] / 2;
      M[54] = M[34] * dist[1];
      M[55] = M[34] * dist[2] / 5;

      M[56] = M[35] * dist[0] / 6;
      M[57] = M[36] * dist[0] / 5;
      M[58] = M[37] * dist[0] / 5;
      M[59] = M[38] * dist[0] / 4;
      M[60] = M[39] * dist[0] / 4;
      M[61] = M[40] * dist[0] / 4;
      M[62] = M[41] * dist[0] / 3;
      M[63] = M[42] * dist[0] / 3;
      M[64] = M[43] * dist[0] / 3;
      M[65] = M[44] * dist[0] / 3;
      M[66] = M[45] * dist[0] / 2;
      M[67] = M[46] * dist[0] / 2;
      M[68] = M[47] * dist[0] / 2;
      M[69] = M[48] * dist[0] / 2;
      M[70] = M[49] * dist[0] / 2;
      M[71] = M[50] * dist[0];
      M[72] = M[51] * dist[0];
      M[73] = M[52] * dist[0];
      M[74] = M[53] * dist[0];
      M[75] = M[54] * dist[0];
      M[76] = M[55] * dist[0];
      M[77] = M[50] * dist[1] / 6;
      M[78] = M[51] * dist[1] / 5;
      M[79] = M[52] * dist[1] / 4;
      M[80] = M[53] * dist[1] / 3;
      M[81] = M[54] * dist[1] / 2;
      M[82] = M[55] * dist[1];
      M[83] = M[55] * dist[2] / 6;

      M[84] = M[56] * dist[0] / 7;
      M[85] = M[57] * dist[0] / 6;
      M[86] = M[58] * dist[0] / 6;
      M[87] = M[59] * dist[0] / 5;
      M[88] = M[60] * dist[0] / 5;
      M[89] = M[61] * dist[0] / 5;
      M[90] = M[62] * dist[0] / 4;
      M[91] = M[63] * dist[0] / 4;
      M[92] = M[64] * dist[0] / 4;
      M[93] = M[65] * dist[0] / 4;
      M[94] = M[66] * dist[0] / 3;
      M[95] = M[67] * dist[0] / 3;
      M[96] = M[68] * dist[0] / 3;
      M[97] = M[69] * dist[0] / 3;
      M[98] = M[70] * dist[0] / 3;
      M[99] = M[71] * dist[0] / 2;
      M[100] = M[72] * dist[0] / 2;
      M[101] = M[73] * dist[0] / 2;
      M[102] = M[74] * dist[0] / 2;
      M[103] = M[75] * dist[0] / 2;
      M[104] = M[76] * dist[0] / 2;
      M[105] = M[77] * dist[0];
      M[106] = M[78] * dist[0];
      M[107] = M[79] * dist[0];
      M[108] = M[80] * dist[0];
      M[109] = M[81] * dist[0];
      M[110] = M[82] * dist[0];
      M[111] = M[83] * dist[0];
      M[112] = M[77] * dist[1] / 7;
      M[113] = M[78] * dist[1] / 6;
      M[114] = M[79] * dist[1] / 5;
      M[115] = M[80] * dist[1] / 4;
      M[116] = M[81] * dist[1] / 3;
      M[117] = M[82] * dist[1] / 2;
      M[118] = M[83] * dist[1];
      M[119] = M[83] * dist[2] / 7;

      M[120] = M[84] * dist[0] / 8;
      M[121] = M[85] * dist[0] / 7;
      M[122] = M[86] * dist[0] / 7;
      M[123] = M[87] * dist[0] / 6;
      M[124] = M[88] * dist[0] / 6;
      M[125] = M[89] * dist[0] / 6;
      M[126] = M[90] * dist[0] / 5;
      M[127] = M[91] * dist[0] / 5;
      M[128] = M[92] * dist[0] / 5;
      M[129] = M[93] * dist[0] / 5;
      M[130] = M[94] * dist[0] / 4;
      M[131] = M[95] * dist[0] / 4;
      M[132] = M[96] * dist[0] / 4;
      M[133] = M[97] * dist[0] / 4;
      M[134] = M[98] * dist[0] / 4;
      M[135] = M[99] * dist[0] / 3;
      M[136] = M[100] * dist[0] / 3;
      M[137] = M[101] * dist[0] / 3;
      M[138] = M[102] * dist[0] / 3;
      M[139] = M[103] * dist[0] / 3;
      M[140] = M[104] * dist[0] / 3;
      M[141] = M[105] * dist[0] / 2;
      M[142] = M[106] * dist[0] / 2;
      M[143] = M[107] * dist[0] / 2;
      M[144] = M[108] * dist[0] / 2;
      M[145] = M[109] * dist[0] / 2;
      M[146] = M[110] * dist[0] / 2;
      M[147] = M[111] * dist[0] / 2;
      M[148] = M[112] * dist[0];
      M[149] = M[113] * dist[0];
      M[150] = M[114] * dist[0];
      M[151] = M[115] * dist[0];
      M[152] = M[116] * dist[0];
      M[153] = M[117] * dist[0];
      M[154] = M[118] * dist[0];
      M[155] = M[119] * dist[0];
      M[156] = M[112] * dist[1] / 8;
      M[157] = M[113] * dist[1] / 7;
      M[158] = M[114] * dist[1] / 6;
      M[159] = M[115] * dist[1] / 5;
      M[160] = M[116] * dist[1] / 4;
      M[161] = M[117] * dist[1] / 3;
      M[162] = M[118] * dist[1] / 2;
      M[163] = M[119] * dist[1];
      M[164] = M[119] * dist[2] / 8;

      M[165] = M[120] * dist[0] / 9;
      M[166] = M[121] * dist[0] / 8;
      M[167] = M[122] * dist[0] / 8;
      M[168] = M[123] * dist[0] / 7;
      M[169] = M[124] * dist[0] / 7;
      M[170] = M[125] * dist[0] / 7;
      M[171] = M[126] * dist[0] / 6;
      M[172] = M[127] * dist[0] / 6;
      M[173] = M[128] * dist[0] / 6;
      M[174] = M[129] * dist[0] / 6;
      M[175] = M[130] * dist[0] / 5;
      M[176] = M[131] * dist[0] / 5;
      M[177] = M[132] * dist[0] / 5;
      M[178] = M[133] * dist[0] / 5;
      M[179] = M[134] * dist[0] / 5;
      M[180] = M[135] * dist[0] / 4;
      M[181] = M[136] * dist[0] / 4;
      M[182] = M[137] * dist[0] / 4;
      M[183] = M[138] * dist[0] / 4;
      M[184] = M[139] * dist[0] / 4;
      M[185] = M[140] * dist[0] / 4;
      M[186] = M[141] * dist[0] / 3;
      M[187] = M[142] * dist[0] / 3;
      M[188] = M[143] * dist[0] / 3;
      M[189] = M[144] * dist[0] / 3;
      M[190] = M[145] * dist[0] / 3;
      M[191] = M[146] * dist[0] / 3;
      M[192] = M[147] * dist[0] / 3;
      M[193] = M[148] * dist[0] / 2;
      M[194] = M[149] * dist[0] / 2;
      M[195] = M[150] * dist[0] / 2;
      M[196] = M[151] * dist[0] / 2;
      M[197] = M[152] * dist[0] / 2;
      M[198] = M[153] * dist[0] / 2;
      M[199] = M[154] * dist[0] / 2;
      M[200] = M[155] * dist[0] / 2;
      M[201] = M[156] * dist[0];
      M[202] = M[157] * dist[0];
      M[203] = M[158] * dist[0];
      M[204] = M[159] * dist[0];
      M[205] = M[160] * dist[0];
      M[206] = M[161] * dist[0];
      M[207] = M[162] * dist[0];
      M[208] = M[163] * dist[0];
      M[209] = M[164] * dist[0];
      M[210] = M[156] * dist[1] / 9;
      M[211] = M[157] * dist[1] / 8;
      M[212] = M[158] * dist[1] / 7;
      M[213] = M[159] * dist[1] / 6;
      M[214] = M[160] * dist[1] / 5;
      M[215] = M[161] * dist[1] / 4;
      M[216] = M[162] * dist[1] / 3;
      M[217] = M[163] * dist[1] / 2;
      M[218] = M[164] * dist[1];
      M[219] = M[164] * dist[2] / 9;
*/
      C->M += M;
    }
    C->RCRIT = std::min(C->R,DMAX);
  }

  void M2M(C_iter CI) {
    for( C_iter CJ=C0+CI->CHILD; CJ!=C0+CI->CHILD+CI->NCHILD; ++CJ ) {
      vect dist = CI->X - CJ->X;
      real R = std::sqrt(norm(dist)) + CJ->RCRIT;
      if( R > DMAX ) DMAX = R;
      Mset P, M;
      P[0] = 1;

      P[1] = P[0] * dist[0];
      P[2] = P[0] * dist[1];
      P[3] = P[0] * dist[2];

      P[4] = P[1] * dist[0] / 2;
      P[5] = P[2] * dist[0];
      P[6] = P[3] * dist[0];
      P[7] = P[2] * dist[1] / 2;
      P[8] = P[3] * dist[1];
      P[9] = P[3] * dist[2] / 2;

      P[10] = P[4] * dist[0] / 3;
      P[11] = P[5] * dist[0] / 2;
      P[12] = P[6] * dist[0] / 2;
      P[13] = P[7] * dist[0];
      P[14] = P[8] * dist[0];
      P[15] = P[9] * dist[0];
      P[16] = P[7] * dist[1] / 3;
      P[17] = P[8] * dist[1] / 2;
      P[18] = P[9] * dist[1];
      P[19] = P[9] * dist[2] / 3;

/*
      P[20] = P[10] * dist[0] / 4;
      P[21] = P[11] * dist[0] / 3;
      P[22] = P[12] * dist[0] / 3;
      P[23] = P[13] * dist[0] / 2;
      P[24] = P[14] * dist[0] / 2;
      P[25] = P[15] * dist[0] / 2;
      P[26] = P[16] * dist[0];
      P[27] = P[17] * dist[0];
      P[28] = P[18] * dist[0];
      P[29] = P[19] * dist[0];
      P[30] = P[16] * dist[1] / 4;
      P[31] = P[17] * dist[1] / 3;
      P[32] = P[18] * dist[1] / 2;
      P[33] = P[19] * dist[1];
      P[34] = P[19] * dist[2] / 4;

      P[35] = P[20] * dist[0] / 5;
      P[36] = P[21] * dist[0] / 4;
      P[37] = P[22] * dist[0] / 4;
      P[38] = P[23] * dist[0] / 3;
      P[39] = P[24] * dist[0] / 3;
      P[40] = P[25] * dist[0] / 3;
      P[41] = P[26] * dist[0] / 2;
      P[42] = P[27] * dist[0] / 2;
      P[43] = P[28] * dist[0] / 2;
      P[44] = P[29] * dist[0] / 2;
      P[45] = P[30] * dist[0];
      P[46] = P[31] * dist[0];
      P[47] = P[32] * dist[0];
      P[48] = P[33] * dist[0];
      P[49] = P[34] * dist[0];
      P[50] = P[30] * dist[1] / 5;
      P[51] = P[31] * dist[1] / 4;
      P[52] = P[32] * dist[1] / 3;
      P[53] = P[33] * dist[1] / 2;
      P[54] = P[34] * dist[1];
      P[55] = P[34] * dist[2] / 5;

      P[56] = P[35] * dist[0] / 6;
      P[57] = P[36] * dist[0] / 5;
      P[58] = P[37] * dist[0] / 5;
      P[59] = P[38] * dist[0] / 4;
      P[60] = P[39] * dist[0] / 4;
      P[61] = P[40] * dist[0] / 4;
      P[62] = P[41] * dist[0] / 3;
      P[63] = P[42] * dist[0] / 3;
      P[64] = P[43] * dist[0] / 3;
      P[65] = P[44] * dist[0] / 3;
      P[66] = P[45] * dist[0] / 2;
      P[67] = P[46] * dist[0] / 2;
      P[68] = P[47] * dist[0] / 2;
      P[69] = P[48] * dist[0] / 2;
      P[70] = P[49] * dist[0] / 2;
      P[71] = P[50] * dist[0];
      P[72] = P[51] * dist[0];
      P[73] = P[52] * dist[0];
      P[74] = P[53] * dist[0];
      P[75] = P[54] * dist[0];
      P[76] = P[55] * dist[0];
      P[77] = P[50] * dist[1] / 6;
      P[78] = P[51] * dist[1] / 5;
      P[79] = P[52] * dist[1] / 4;
      P[80] = P[53] * dist[1] / 3;
      P[81] = P[54] * dist[1] / 2;
      P[82] = P[55] * dist[1];
      P[83] = P[55] * dist[2] / 6;

      P[84] = P[56] * dist[0] / 7;
      P[85] = P[57] * dist[0] / 6;
      P[86] = P[58] * dist[0] / 6;
      P[87] = P[59] * dist[0] / 5;
      P[88] = P[60] * dist[0] / 5;
      P[89] = P[61] * dist[0] / 5;
      P[90] = P[62] * dist[0] / 4;
      P[91] = P[63] * dist[0] / 4;
      P[92] = P[64] * dist[0] / 4;
      P[93] = P[65] * dist[0] / 4;
      P[94] = P[66] * dist[0] / 3;
      P[95] = P[67] * dist[0] / 3;
      P[96] = P[68] * dist[0] / 3;
      P[97] = P[69] * dist[0] / 3;
      P[98] = P[70] * dist[0] / 3;
      P[99] = P[71] * dist[0] / 2;
      P[100] = P[72] * dist[0] / 2;
      P[101] = P[73] * dist[0] / 2;
      P[102] = P[74] * dist[0] / 2;
      P[103] = P[75] * dist[0] / 2;
      P[104] = P[76] * dist[0] / 2;
      P[105] = P[77] * dist[0];
      P[106] = P[78] * dist[0];
      P[107] = P[79] * dist[0];
      P[108] = P[80] * dist[0];
      P[109] = P[81] * dist[0];
      P[110] = P[82] * dist[0];
      P[111] = P[83] * dist[0];
      P[112] = P[77] * dist[1] / 7;
      P[113] = P[78] * dist[1] / 6;
      P[114] = P[79] * dist[1] / 5;
      P[115] = P[80] * dist[1] / 4;
      P[116] = P[81] * dist[1] / 3;
      P[117] = P[82] * dist[1] / 2;
      P[118] = P[83] * dist[1];
      P[119] = P[83] * dist[2] / 7;

      P[120] = P[84] * dist[0] / 8;
      P[121] = P[85] * dist[0] / 7;
      P[122] = P[86] * dist[0] / 7;
      P[123] = P[87] * dist[0] / 6;
      P[124] = P[88] * dist[0] / 6;
      P[125] = P[89] * dist[0] / 6;
      P[126] = P[90] * dist[0] / 5;
      P[127] = P[91] * dist[0] / 5;
      P[128] = P[92] * dist[0] / 5;
      P[129] = P[93] * dist[0] / 5;
      P[130] = P[94] * dist[0] / 4;
      P[131] = P[95] * dist[0] / 4;
      P[132] = P[96] * dist[0] / 4;
      P[133] = P[97] * dist[0] / 4;
      P[134] = P[98] * dist[0] / 4;
      P[135] = P[99] * dist[0] / 3;
      P[136] = P[100] * dist[0] / 3;
      P[137] = P[101] * dist[0] / 3;
      P[138] = P[102] * dist[0] / 3;
      P[139] = P[103] * dist[0] / 3;
      P[140] = P[104] * dist[0] / 3;
      P[141] = P[105] * dist[0] / 2;
      P[142] = P[106] * dist[0] / 2;
      P[143] = P[107] * dist[0] / 2;
      P[144] = P[108] * dist[0] / 2;
      P[145] = P[109] * dist[0] / 2;
      P[146] = P[110] * dist[0] / 2;
      P[147] = P[111] * dist[0] / 2;
      P[148] = P[112] * dist[0];
      P[149] = P[113] * dist[0];
      P[150] = P[114] * dist[0];
      P[151] = P[115] * dist[0];
      P[152] = P[116] * dist[0];
      P[153] = P[117] * dist[0];
      P[154] = P[118] * dist[0];
      P[155] = P[119] * dist[0];
      P[156] = P[112] * dist[1] / 8;
      P[157] = P[113] * dist[1] / 7;
      P[158] = P[114] * dist[1] / 6;
      P[159] = P[115] * dist[1] / 5;
      P[160] = P[116] * dist[1] / 4;
      P[161] = P[117] * dist[1] / 3;
      P[162] = P[118] * dist[1] / 2;
      P[163] = P[119] * dist[1];
      P[164] = P[119] * dist[2] / 8;

      P[165] = P[120] * dist[0] / 9;
      P[166] = P[121] * dist[0] / 8;
      P[167] = P[122] * dist[0] / 8;
      P[168] = P[123] * dist[0] / 7;
      P[169] = P[124] * dist[0] / 7;
      P[170] = P[125] * dist[0] / 7;
      P[171] = P[126] * dist[0] / 6;
      P[172] = P[127] * dist[0] / 6;
      P[173] = P[128] * dist[0] / 6;
      P[174] = P[129] * dist[0] / 6;
      P[175] = P[130] * dist[0] / 5;
      P[176] = P[131] * dist[0] / 5;
      P[177] = P[132] * dist[0] / 5;
      P[178] = P[133] * dist[0] / 5;
      P[179] = P[134] * dist[0] / 5;
      P[180] = P[135] * dist[0] / 4;
      P[181] = P[136] * dist[0] / 4;
      P[182] = P[137] * dist[0] / 4;
      P[183] = P[138] * dist[0] / 4;
      P[184] = P[139] * dist[0] / 4;
      P[185] = P[140] * dist[0] / 4;
      P[186] = P[141] * dist[0] / 3;
      P[187] = P[142] * dist[0] / 3;
      P[188] = P[143] * dist[0] / 3;
      P[189] = P[144] * dist[0] / 3;
      P[190] = P[145] * dist[0] / 3;
      P[191] = P[146] * dist[0] / 3;
      P[192] = P[147] * dist[0] / 3;
      P[193] = P[148] * dist[0] / 2;
      P[194] = P[149] * dist[0] / 2;
      P[195] = P[150] * dist[0] / 2;
      P[196] = P[151] * dist[0] / 2;
      P[197] = P[152] * dist[0] / 2;
      P[198] = P[153] * dist[0] / 2;
      P[199] = P[154] * dist[0] / 2;
      P[200] = P[155] * dist[0] / 2;
      P[201] = P[156] * dist[0];
      P[202] = P[157] * dist[0];
      P[203] = P[158] * dist[0];
      P[204] = P[159] * dist[0];
      P[205] = P[160] * dist[0];
      P[206] = P[161] * dist[0];
      P[207] = P[162] * dist[0];
      P[208] = P[163] * dist[0];
      P[209] = P[164] * dist[0];
      P[210] = P[156] * dist[1] / 9;
      P[211] = P[157] * dist[1] / 8;
      P[212] = P[158] * dist[1] / 7;
      P[213] = P[159] * dist[1] / 6;
      P[214] = P[160] * dist[1] / 5;
      P[215] = P[161] * dist[1] / 4;
      P[216] = P[162] * dist[1] / 3;
      P[217] = P[163] * dist[1] / 2;
      P[218] = P[164] * dist[1];
      P[219] = P[164] * dist[2] / 9;
*/

      M = CJ->M;
      CI->M += M;

      CI->M[1] += P[1]*M[0];
      CI->M[2] += P[2]*M[0];
      CI->M[3] += P[3]*M[0];

      CI->M[4] += P[1]*M[1]+P[4]*M[0];
      CI->M[5] += P[1]*M[2]+P[2]*M[1]+P[5]*M[0];
      CI->M[6] += P[1]*M[3]+P[3]*M[1]+P[6]*M[0];
      CI->M[7] += P[2]*M[2]+P[7]*M[0];
      CI->M[8] += P[2]*M[3]+P[3]*M[2]+P[8]*M[0];
      CI->M[9] += P[3]*M[3]+P[9]*M[0];

      CI->M[10] += P[1]*M[4]+P[4]*M[1]+P[10]*M[0];
      CI->M[11] += P[1]*M[5]+P[2]*M[4]+P[4]*M[2]+P[5]*M[1]+P[11]*M[0];
      CI->M[12] += P[1]*M[6]+P[3]*M[4]+P[4]*M[3]+P[6]*M[1]+P[12]*M[0];
      CI->M[13] += P[1]*M[7]+P[2]*M[5]+P[5]*M[2]+P[7]*M[1]+P[13]*M[0];
      CI->M[14] += P[1]*M[8]+P[2]*M[6]+P[3]*M[5]+P[5]*M[3]+P[6]*M[2]+P[8]*M[1]+P[14]*M[0];
      CI->M[15] += P[1]*M[9]+P[3]*M[6]+P[6]*M[3]+P[9]*M[1]+P[15]*M[0];
      CI->M[16] += P[2]*M[7]+P[7]*M[2]+P[16]*M[0];
      CI->M[17] += P[2]*M[8]+P[3]*M[7]+P[7]*M[3]+P[8]*M[2]+P[17]*M[0];
      CI->M[18] += P[2]*M[9]+P[3]*M[8]+P[8]*M[3]+P[9]*M[2]+P[18]*M[0];
      CI->M[19] += P[3]*M[9]+P[9]*M[3]+P[19]*M[0];

/*
      CI->M[20] += P[1]*M[10]+P[4]*M[4]+P[10]*M[1]+P[20]*M[0];
      CI->M[21] += P[1]*M[11]+P[2]*M[10]+P[4]*M[5]+P[5]*M[4]+P[10]*M[2]+P[11]*M[1]+P[21]*M[0];
      CI->M[22] += P[1]*M[12]+P[3]*M[10]+P[4]*M[6]+P[6]*M[4]+P[10]*M[3]+P[12]*M[1]+P[22]*M[0];
      CI->M[23] += P[1]*M[13]+P[2]*M[11]+P[4]*M[7]+P[5]*M[5]+P[7]*M[4]+P[11]*M[2]+P[13]*M[1]+P[23]*M[0];
      CI->M[24] += P[1]*M[14]+P[2]*M[12]+P[3]*M[11]+P[4]*M[8]+P[5]*M[6]+P[6]*M[5]+P[8]*M[4]+P[11]*M[3]+P[12]*M[2]+P[14]*M[1]+P[24]*M[0];
      CI->M[25] += P[1]*M[15]+P[3]*M[12]+P[4]*M[9]+P[6]*M[6]+P[9]*M[4]+P[12]*M[3]+P[15]*M[1]+P[25]*M[0];
      CI->M[26] += P[1]*M[16]+P[2]*M[13]+P[5]*M[7]+P[7]*M[5]+P[13]*M[2]+P[16]*M[1]+P[26]*M[0];
      CI->M[27] += P[1]*M[17]+P[2]*M[14]+P[3]*M[13]+P[5]*M[8]+P[6]*M[7]+P[7]*M[6]+P[8]*M[5]+P[13]*M[3]+P[14]*M[2]+P[17]*M[1]+P[27]*M[0];
      CI->M[28] += P[1]*M[18]+P[2]*M[15]+P[3]*M[14]+P[5]*M[9]+P[6]*M[8]+P[8]*M[6]+P[9]*M[5]+P[14]*M[3]+P[15]*M[2]+P[18]*M[1]+P[28]*M[0];
      CI->M[29] += P[1]*M[19]+P[3]*M[15]+P[6]*M[9]+P[9]*M[6]+P[15]*M[3]+P[19]*M[1]+P[29]*M[0];
      CI->M[30] += P[2]*M[16]+P[7]*M[7]+P[16]*M[2]+P[30]*M[0];
      CI->M[31] += P[2]*M[17]+P[3]*M[16]+P[7]*M[8]+P[8]*M[7]+P[16]*M[3]+P[17]*M[2]+P[31]*M[0];
      CI->M[32] += P[2]*M[18]+P[3]*M[17]+P[7]*M[9]+P[8]*M[8]+P[9]*M[7]+P[17]*M[3]+P[18]*M[2]+P[32]*M[0];
      CI->M[33] += P[2]*M[19]+P[3]*M[18]+P[8]*M[9]+P[9]*M[8]+P[18]*M[3]+P[19]*M[2]+P[33]*M[0];
      CI->M[34] += P[3]*M[19]+P[9]*M[9]+P[19]*M[3]+P[34]*M[0];

      CI->M[35] += P[1]*M[20]+P[4]*M[10]+P[10]*M[4]+P[20]*M[1]+P[35]*M[0];
      CI->M[36] += P[1]*M[21]+P[2]*M[20]+P[4]*M[11]+P[5]*M[10]+P[10]*M[5]+P[11]*M[4]+P[20]*M[2]+P[21]*M[1]+P[36]*M[0];
      CI->M[37] += P[1]*M[22]+P[3]*M[20]+P[4]*M[12]+P[6]*M[10]+P[10]*M[6]+P[12]*M[4]+P[20]*M[3]+P[22]*M[1]+P[37]*M[0];
      CI->M[38] += P[1]*M[23]+P[2]*M[21]+P[4]*M[13]+P[5]*M[11]+P[7]*M[10]+P[10]*M[7]+P[11]*M[5]+P[13]*M[4]+P[21]*M[2]+P[23]*M[1]+P[38]*M[0];
      CI->M[39] += P[1]*M[24]+P[2]*M[22]+P[3]*M[21]+P[4]*M[14]+P[6]*M[12]+P[8]*M[11]+P[10]*M[10]+P[11]*M[8]+P[12]*M[6]+P[14]*M[4]+P[21]*M[3]+P[22]*M[2]+P[24]*M[1]+P[39]*M[0];
      CI->M[40] += P[1]*M[25]+P[3]*M[22]+P[4]*M[15]+P[6]*M[12]+P[9]*M[10]+P[10]*M[9]+P[12]*M[6]+P[15]*M[4]+P[22]*M[3]+P[25]*M[1]+P[40]*M[0];
      CI->M[41] += P[1]*M[26]+P[2]*M[23]+P[4]*M[16]+P[5]*M[13]+P[7]*M[11]+P[11]*M[7]+P[13]*M[5]+P[16]*M[4]+P[23]*M[2]+P[26]*M[1]+P[41]*M[0];
      CI->M[42] += P[1]*M[27]+P[2]*M[24]+P[3]*M[23]+P[4]*M[17]+P[5]*M[14]+P[6]*M[13]+P[7]*M[12]+P[8]*M[11]+P[11]*M[8]+P[12]*M[7]+P[13]*M[6]+P[14]*M[5]+P[17]*M[4]+P[23]*M[3]+P[24]*M[2]+P[27]*M[1]+P[42]*M[0];
      CI->M[43] += P[1]*M[28]+P[2]*M[25]+P[3]*M[24]+P[4]*M[18]+P[5]*M[15]+P[6]*M[14]+P[8]*M[12]+P[9]*M[11]+P[11]*M[9]+P[12]*M[8]+P[14]*M[6]+P[15]*M[5]+P[18]*M[4]+P[24]*M[3]+P[25]*M[2]+P[28]*M[1]+P[43]*M[0];
      CI->M[44] += P[1]*M[29]+P[3]*M[25]+P[4]*M[19]+P[6]*M[15]+P[9]*M[12]+P[12]*M[9]+P[15]*M[6]+P[19]*M[4]+P[25]*M[3]+P[29]*M[1]+P[44]*M[0];
      CI->M[45] += P[1]*M[30]+P[2]*M[26]+P[5]*M[16]+P[7]*M[13]+P[13]*M[7]+P[16]*M[5]+P[26]*M[2]+P[30]*M[1]+P[45]*M[0];
      CI->M[46] += P[1]*M[31]+P[2]*M[27]+P[3]*M[26]+P[5]*M[17]+P[7]*M[16]+P[8]*M[14]+P[13]*M[13]+P[14]*M[8]+P[16]*M[7]+P[17]*M[5]+P[26]*M[3]+P[27]*M[2]+P[31]*M[1]+P[46]*M[0];
      CI->M[47] += P[1]*M[32]+P[2]*M[28]+P[3]*M[27]+P[5]*M[18]+P[6]*M[17]+P[7]*M[15]+P[8]*M[14]+P[9]*M[13]+P[13]*M[9]+P[14]*M[8]+P[15]*M[7]+P[17]*M[6]+P[18]*M[5]+P[27]*M[3]+P[28]*M[2]+P[32]*M[1]+P[47]*M[0];
      CI->M[48] += P[1]*M[33]+P[2]*M[29]+P[3]*M[28]+P[5]*M[19]+P[8]*M[18]+P[9]*M[15]+P[14]*M[14]+P[15]*M[9]+P[18]*M[8]+P[19]*M[5]+P[28]*M[3]+P[29]*M[2]+P[33]*M[1]+P[48]*M[0];
      CI->M[49] += P[1]*M[34]+P[3]*M[29]+P[6]*M[19]+P[9]*M[15]+P[15]*M[9]+P[19]*M[6]+P[29]*M[3]+P[34]*M[1]+P[49]*M[0];
      CI->M[50] += P[2]*M[30]+P[7]*M[16]+P[16]*M[7]+P[30]*M[2]+P[50]*M[0];
      CI->M[51] += P[2]*M[31]+P[3]*M[30]+P[7]*M[17]+P[8]*M[16]+P[16]*M[8]+P[17]*M[7]+P[30]*M[3]+P[31]*M[2]+P[51]*M[0];
      CI->M[52] += P[2]*M[32]+P[3]*M[31]+P[7]*M[18]+P[8]*M[17]+P[9]*M[16]+P[16]*M[9]+P[17]*M[8]+P[18]*M[7]+P[31]*M[3]+P[32]*M[2]+P[52]*M[0];
      CI->M[53] += P[2]*M[33]+P[3]*M[32]+P[7]*M[19]+P[8]*M[18]+P[9]*M[17]+P[17]*M[9]+P[18]*M[8]+P[19]*M[7]+P[32]*M[3]+P[33]*M[2]+P[53]*M[0];
      CI->M[54] += P[2]*M[34]+P[3]*M[33]+P[8]*M[19]+P[9]*M[18]+P[18]*M[9]+P[19]*M[8]+P[33]*M[3]+P[34]*M[2]+P[54]*M[0];
      CI->M[55] += P[3]*M[34]+P[9]*M[19]+P[19]*M[9]+P[34]*M[3]+P[55]*M[0];
*/

    }
    CI->RCRIT = std::min(CI->R,DMAX);
  }

  void M2L(C_iter CI, C_iter CJ, bool mutual=true) const {
    vect dist = CI->X - CJ->X;
    real invR2 = 1 / norm(dist);
    real invR  = std::sqrt(invR2);
    invR2 = -invR2;
    real invR3 = invR * invR2;
    real invR5 = 3 * invR3 * invR2;
    real invR7 = 5 * invR5 * invR2;
    real invR9 = 7 * invR7 * invR2;
    real x = dist[0], y = dist[1], z = dist[2];
    Mset P, M;

    P[0] = invR;
    P[1] = x * invR3;
    P[2] = y * invR3;
    P[3] = z * invR3;
    P[4] = x * x * invR5 + invR3;
    P[5] = x * y * invR5;
    P[6] = x * z * invR5;
    P[7] = y * y * invR5 + invR3;
    P[8] = y * z * invR5;
    P[9] = z * z * invR5 + invR3;
    P[10] = x * x * x * invR7 + 3 * x * invR5;
    P[11] = x * x * y * invR7 +     y * invR5;
    P[12] = x * x * z * invR7 +     z * invR5;
    P[13] = x * y * y * invR7 +     x * invR5;
    P[14] = x * y * z * invR7;
    P[15] = x * z * z * invR7 +     x * invR5;
    P[16] = y * y * y * invR7 + 3 * y * invR5;
    P[17] = y * y * z * invR7 +     z * invR5;
    P[18] = y * z * z * invR7 +     y * invR5;
    P[19] = z * z * z * invR7 + 3 * z * invR5;

    M = CJ->M;
    CI->L += M[0]*P;

    CI->L[0] += M[1]*P[1]+M[2]*P[2]+M[3]*P[3];

    for( int i=4; i<10; ++i ) CI->L[0] += M[i]*P[i];
    CI->L[1] += M[1]*P[4]+M[2]*P[5]+M[3]*P[6];
    CI->L[2] += M[1]*P[5]+M[2]*P[7]+M[3]*P[8];
    CI->L[3] += M[1]*P[6]+M[2]*P[8]+M[3]*P[9];

    for( int i=10; i<20; ++i ) CI->L[0] += M[i]*P[i];
    CI->L[1] += M[4]*P[10]+M[5]*P[11]+M[6]*P[12]+M[7]*P[13]+M[8]*P[14]+M[9]*P[15];
    CI->L[2] += M[4]*P[11]+M[5]*P[13]+M[6]*P[14]+M[7]*P[16]+M[8]*P[17]+M[9]*P[18];
    CI->L[3] += M[4]*P[12]+M[5]*P[14]+M[6]*P[15]+M[7]*P[17]+M[8]*P[18]+M[9]*P[19];
    CI->L[4] += M[1]*P[10]+M[2]*P[11]+M[3]*P[12];
    CI->L[5] += M[1]*P[11]+M[2]*P[13]+M[3]*P[14];
    CI->L[6] += M[1]*P[12]+M[2]*P[14]+M[3]*P[15];
    CI->L[7] += M[1]*P[13]+M[2]*P[16]+M[3]*P[17];
    CI->L[8] += M[1]*P[14]+M[2]*P[17]+M[3]*P[18];
    CI->L[9] += M[1]*P[15]+M[2]*P[18]+M[3]*P[19];

/*
    for( int i=20; i<35; ++i ) CI->L[0] += M[i]*P[i];
    CI->L[1] += M[10]*P[20]+M[11]*P[21]+M[12]*P[22]+M[13]*P[23]+M[14]*P[24]+M[15]*P[25]+M[16]*P[26]+M[17]*P[27]+M[18]*P[28]+M[19]*P[29];
    CI->L[2] += M[10]*P[21]+M[11]*P[23]+M[12]*P[24]+M[13]*P[26]+M[14]*P[27]+M[15]*P[28]+M[16]*P[30]+M[17]*P[31]+M[18]*P[32]+M[19]*P[33];
    CI->L[3] += M[10]*P[22]+M[11]*P[24]+M[12]*P[25]+M[13]*P[27]+M[14]*P[28]+M[15]*P[29]+M[16]*P[31]+M[17]*P[32]+M[18]*P[33]+M[19]*P[34];
    CI->L[4] += M[4]*P[20]+M[5]*P[21]+M[6]*P[22]+M[7]*P[23]+M[8]*P[24]+M[9]*P[25];
    CI->L[5] += M[4]*P[21]+M[5]*P[23]+M[6]*P[24]+M[7]*P[26]+M[8]*P[27]+M[9]*P[28];
    CI->L[6] += M[4]*P[22]+M[5]*P[24]+M[6]*P[25]+M[7]*P[27]+M[8]*P[28]+M[9]*P[29];
    CI->L[7] += M[4]*P[23]+M[5]*P[26]+M[6]*P[27]+M[7]*P[30]+M[8]*P[31]+M[9]*P[32];
    CI->L[8] += M[4]*P[24]+M[5]*P[27]+M[6]*P[28]+M[7]*P[31]+M[8]*P[32]+M[9]*P[33];
    CI->L[9] += M[4]*P[25]+M[5]*P[28]+M[6]*P[29]+M[7]*P[32]+M[8]*P[33]+M[9]*P[34];
    CI->L[10] += M[1]*P[20]+M[2]*P[21]+M[3]*P[22];
    CI->L[11] += M[1]*P[21]+M[2]*P[23]+M[3]*P[24];
    CI->L[12] += M[1]*P[22]+M[2]*P[24]+M[3]*P[25];
    CI->L[13] += M[1]*P[23]+M[2]*P[26]+M[3]*P[27];
    CI->L[14] += M[1]*P[24]+M[2]*P[27]+M[3]*P[28];
    CI->L[15] += M[1]*P[25]+M[2]*P[28]+M[3]*P[29];
    CI->L[16] += M[1]*P[26]+M[2]*P[30]+M[3]*P[31];
    CI->L[17] += M[1]*P[27]+M[2]*P[31]+M[3]*P[32];
    CI->L[18] += M[1]*P[28]+M[2]*P[32]+M[3]*P[33];
    CI->L[19] += M[1]*P[29]+M[2]*P[33]+M[3]*P[34];

    for( int i=35; i<56; ++i ) CI->L[0] += M[i]*P[i];
    CI->L[1] += M[20]*P[35]+M[21]*P[36]+M[22]*P[37]+M[23]*P[38]+M[24]*P[39]+M[25]*P[40]+M[26]*P[41]+M[27]*P[42]+M[28]*P[43]+M[29]*P[44]+M[30]*P[45]+M[31]*P[46]+M[32]*P[47]+M[33]*P[48]+M[34]*P[49];
    CI->L[2] += M[20]*P[36]+M[21]*P[38]+M[22]*P[39]+M[23]*P[41]+M[24]*P[42]+M[25]*P[43]+M[26]*P[45]+M[27]*P[46]+M[28]*P[47]+M[29]*P[48]+M[30]*P[50]+M[31]*P[51]+M[32]*P[52]+M[33]*P[53]+M[34]*P[54];
    CI->L[3] += M[20]*P[37]+M[21]*P[39]+M[22]*P[40]+M[23]*P[42]+M[24]*P[43]+M[25]*P[44]+M[26]*P[46]+M[27]*P[47]+M[28]*P[48]+M[29]*P[49]+M[30]*P[51]+M[31]*P[52]+M[32]*P[53]+M[33]*P[54]+M[34]*P[55];
    CI->L[4] += M[10]*P[35]+M[11]*P[36]+M[12]*P[37]+M[13]*P[38]+M[14]*P[39]+M[15]*P[40]+M[16]*P[41]+M[17]*P[42]+M[18]*P[43]+M[19]*P[44];
    CI->L[5] += M[10]*P[36]+M[11]*P[38]+M[12]*P[39]+M[13]*P[41]+M[14]*P[42]+M[15]*P[43]+M[16]*P[45]+M[17]*P[46]+M[18]*P[47]+M[19]*P[48];
    CI->L[6] += M[10]*P[37]+M[11]*P[39]+M[12]*P[40]+M[13]*P[42]+M[14]*P[43]+M[15]*P[44]+M[16]*P[46]+M[17]*P[47]+M[18]*P[48]+M[19]*P[49];
    CI->L[7] += M[10]*P[38]+M[11]*P[41]+M[12]*P[42]+M[13]*P[45]+M[14]*P[46]+M[15]*P[47]+M[16]*P[50]+M[17]*P[51]+M[18]*P[52]+M[19]*P[53];
    CI->L[8] += M[10]*P[39]+M[11]*P[42]+M[12]*P[43]+M[13]*P[46]+M[14]*P[47]+M[15]*P[48]+M[16]*P[51]+M[17]*P[52]+M[18]*P[53]+M[19]*P[54];
    CI->L[9] += M[10]*P[40]+M[11]*P[43]+M[12]*P[44]+M[13]*P[47]+M[14]*P[48]+M[15]*P[49]+M[16]*P[52]+M[17]*P[53]+M[18]*P[54]+M[19]*P[55];
    CI->L[10] += M[4]*P[35]+M[5]*P[36]+M[6]*P[37]+M[7]*P[38]+M[8]*P[39]+M[9]*P[40];
    CI->L[11] += M[4]*P[36]+M[5]*P[38]+M[6]*P[39]+M[7]*P[41]+M[8]*P[42]+M[9]*P[43];
    CI->L[12] += M[4]*P[37]+M[5]*P[39]+M[6]*P[40]+M[7]*P[42]+M[8]*P[43]+M[9]*P[44];
    CI->L[13] += M[4]*P[38]+M[5]*P[41]+M[6]*P[42]+M[7]*P[45]+M[8]*P[46]+M[9]*P[47];
    CI->L[14] += M[4]*P[39]+M[5]*P[42]+M[6]*P[43]+M[7]*P[46]+M[8]*P[47]+M[9]*P[48];
    CI->L[15] += M[4]*P[40]+M[5]*P[43]+M[6]*P[44]+M[7]*P[47]+M[8]*P[48]+M[9]*P[49];
    CI->L[16] += M[4]*P[41]+M[5]*P[45]+M[6]*P[46]+M[7]*P[50]+M[8]*P[51]+M[9]*P[52];
    CI->L[17] += M[4]*P[42]+M[5]*P[46]+M[6]*P[47]+M[7]*P[51]+M[8]*P[52]+M[9]*P[53];
    CI->L[18] += M[4]*P[43]+M[5]*P[47]+M[6]*P[48]+M[7]*P[52]+M[8]*P[53]+M[9]*P[54];
    CI->L[19] += M[4]*P[44]+M[5]*P[48]+M[6]*P[49]+M[7]*P[53]+M[8]*P[54]+M[9]*P[55];
    CI->L[20] += M[1]*P[35]+M[2]*P[36]+M[3]*P[37];
    CI->L[21] += M[1]*P[36]+M[2]*P[38]+M[3]*P[39];
    CI->L[22] += M[1]*P[37]+M[2]*P[39]+M[3]*P[40];
    CI->L[23] += M[1]*P[38]+M[2]*P[41]+M[3]*P[42];
    CI->L[24] += M[1]*P[39]+M[2]*P[42]+M[3]*P[43];
    CI->L[25] += M[1]*P[40]+M[2]*P[43]+M[3]*P[44];
    CI->L[26] += M[1]*P[41]+M[2]*P[45]+M[3]*P[46];
    CI->L[27] += M[1]*P[42]+M[2]*P[46]+M[3]*P[47];
    CI->L[28] += M[1]*P[43]+M[2]*P[47]+M[3]*P[48];
    CI->L[29] += M[1]*P[44]+M[2]*P[48]+M[3]*P[49];
    CI->L[30] += M[1]*P[45]+M[2]*P[50]+M[3]*P[51];
    CI->L[31] += M[1]*P[46]+M[2]*P[51]+M[3]*P[52];
    CI->L[32] += M[1]*P[47]+M[2]*P[52]+M[3]*P[53];
    CI->L[33] += M[1]*P[48]+M[2]*P[53]+M[3]*P[54];
    CI->L[34] += M[1]*P[49]+M[2]*P[54]+M[3]*P[55];
*/

    invR = mutual;
  }

  void L2L(C_iter CI) const {
    C_iter CJ = C0 + CI->PARENT;
    vect dist = CI->X - CJ->X;
    Lset P, L;
    P[0] = 1;

    P[1] = P[0] * dist[0];
    P[2] = P[0] * dist[1];
    P[3] = P[0] * dist[2];

    P[4] = P[1] * dist[0] / 2;
    P[5] = P[2] * dist[0];
    P[6] = P[3] * dist[0];
    P[7] = P[2] * dist[1] / 2;
    P[8] = P[3] * dist[1];
    P[9] = P[3] * dist[2] / 2;

    P[10] = P[4] * dist[0] / 3;
    P[11] = P[5] * dist[0] / 2;
    P[12] = P[6] * dist[0] / 2;
    P[13] = P[7] * dist[0];
    P[14] = P[8] * dist[0];
    P[15] = P[9] * dist[0];
    P[16] = P[7] * dist[1] / 3;
    P[17] = P[8] * dist[1] / 2;
    P[18] = P[9] * dist[1];
    P[19] = P[9] * dist[2] / 3;

/*
    P[20] = P[10] * dist[0] / 4;
    P[21] = P[11] * dist[0] / 3;
    P[22] = P[12] * dist[0] / 3;
    P[23] = P[13] * dist[0] / 2;
    P[24] = P[14] * dist[0] / 2;
    P[25] = P[15] * dist[0] / 2;
    P[26] = P[16] * dist[0];
    P[27] = P[17] * dist[0];
    P[28] = P[18] * dist[0];
    P[29] = P[19] * dist[0];
    P[30] = P[16] * dist[1] / 4;
    P[31] = P[17] * dist[1] / 3;
    P[32] = P[18] * dist[1] / 2;
    P[33] = P[19] * dist[1];
    P[34] = P[19] * dist[2] / 4;

    P[35] = P[20] * dist[0] / 5;
    P[36] = P[21] * dist[0] / 4;
    P[37] = P[22] * dist[0] / 4;
    P[38] = P[23] * dist[0] / 3;
    P[39] = P[24] * dist[0] / 3;
    P[40] = P[25] * dist[0] / 3;
    P[41] = P[26] * dist[0] / 2;
    P[42] = P[27] * dist[0] / 2;
    P[43] = P[28] * dist[0] / 2;
    P[44] = P[29] * dist[0] / 2;
    P[45] = P[30] * dist[0];
    P[46] = P[31] * dist[0];
    P[47] = P[32] * dist[0];
    P[48] = P[33] * dist[0];
    P[49] = P[34] * dist[0];
    P[50] = P[30] * dist[1] / 5;
    P[51] = P[31] * dist[1] / 4;
    P[52] = P[32] * dist[1] / 3;
    P[53] = P[33] * dist[1] / 2;
    P[54] = P[34] * dist[1];
    P[55] = P[34] * dist[2] / 5;

    P[56] = P[35] * dist[0] / 6;
    P[57] = P[36] * dist[0] / 5;
    P[58] = P[37] * dist[0] / 5;
    P[59] = P[38] * dist[0] / 4;
    P[60] = P[39] * dist[0] / 4;
    P[61] = P[40] * dist[0] / 4;
    P[62] = P[41] * dist[0] / 3;
    P[63] = P[42] * dist[0] / 3;
    P[64] = P[43] * dist[0] / 3;
    P[65] = P[44] * dist[0] / 3;
    P[66] = P[45] * dist[0] / 2;
    P[67] = P[46] * dist[0] / 2;
    P[68] = P[47] * dist[0] / 2;
    P[69] = P[48] * dist[0] / 2;
    P[70] = P[49] * dist[0] / 2;
    P[71] = P[50] * dist[0];
    P[72] = P[51] * dist[0];
    P[73] = P[52] * dist[0];
    P[74] = P[53] * dist[0];
    P[75] = P[54] * dist[0];
    P[76] = P[55] * dist[0];
    P[77] = P[50] * dist[1] / 6;
    P[78] = P[51] * dist[1] / 5;
    P[79] = P[52] * dist[1] / 4;
    P[80] = P[53] * dist[1] / 3;
    P[81] = P[54] * dist[1] / 2;
    P[82] = P[55] * dist[1];
    P[83] = P[55] * dist[2] / 6;

    P[84] = P[56] * dist[0] / 7;
    P[85] = P[57] * dist[0] / 6;
    P[86] = P[58] * dist[0] / 6;
    P[87] = P[59] * dist[0] / 5;
    P[88] = P[60] * dist[0] / 5;
    P[89] = P[61] * dist[0] / 5;
    P[90] = P[62] * dist[0] / 4;
    P[91] = P[63] * dist[0] / 4;
    P[92] = P[64] * dist[0] / 4;
    P[93] = P[65] * dist[0] / 4;
    P[94] = P[66] * dist[0] / 3;
    P[95] = P[67] * dist[0] / 3;
    P[96] = P[68] * dist[0] / 3;
    P[97] = P[69] * dist[0] / 3;
    P[98] = P[70] * dist[0] / 3;
    P[99] = P[71] * dist[0] / 2;
    P[100] = P[72] * dist[0] / 2;
    P[101] = P[73] * dist[0] / 2;
    P[102] = P[74] * dist[0] / 2;
    P[103] = P[75] * dist[0] / 2;
    P[104] = P[76] * dist[0] / 2;
    P[105] = P[77] * dist[0];
    P[106] = P[78] * dist[0];
    P[107] = P[79] * dist[0];
    P[108] = P[80] * dist[0];
    P[109] = P[81] * dist[0];
    P[110] = P[82] * dist[0];
    P[111] = P[83] * dist[0];
    P[112] = P[77] * dist[1] / 7;
    P[113] = P[78] * dist[1] / 6;
    P[114] = P[79] * dist[1] / 5;
    P[115] = P[80] * dist[1] / 4;
    P[116] = P[81] * dist[1] / 3;
    P[117] = P[82] * dist[1] / 2;
    P[118] = P[83] * dist[1];
    P[119] = P[83] * dist[2] / 7;

    P[120] = P[84] * dist[0] / 8;
    P[121] = P[85] * dist[0] / 7;
    P[122] = P[86] * dist[0] / 7;
    P[123] = P[87] * dist[0] / 6;
    P[124] = P[88] * dist[0] / 6;
    P[125] = P[89] * dist[0] / 6;
    P[126] = P[90] * dist[0] / 5;
    P[127] = P[91] * dist[0] / 5;
    P[128] = P[92] * dist[0] / 5;
    P[129] = P[93] * dist[0] / 5;
    P[130] = P[94] * dist[0] / 4;
    P[131] = P[95] * dist[0] / 4;
    P[132] = P[96] * dist[0] / 4;
    P[133] = P[97] * dist[0] / 4;
    P[134] = P[98] * dist[0] / 4;
    P[135] = P[99] * dist[0] / 3;
    P[136] = P[100] * dist[0] / 3;
    P[137] = P[101] * dist[0] / 3;
    P[138] = P[102] * dist[0] / 3;
    P[139] = P[103] * dist[0] / 3;
    P[140] = P[104] * dist[0] / 3;
    P[141] = P[105] * dist[0] / 2;
    P[142] = P[106] * dist[0] / 2;
    P[143] = P[107] * dist[0] / 2;
    P[144] = P[108] * dist[0] / 2;
    P[145] = P[109] * dist[0] / 2;
    P[146] = P[110] * dist[0] / 2;
    P[147] = P[111] * dist[0] / 2;
    P[148] = P[112] * dist[0];
    P[149] = P[113] * dist[0];
    P[150] = P[114] * dist[0];
    P[151] = P[115] * dist[0];
    P[152] = P[116] * dist[0];
    P[153] = P[117] * dist[0];
    P[154] = P[118] * dist[0];
    P[155] = P[119] * dist[0];
    P[156] = P[112] * dist[1] / 8;
    P[157] = P[113] * dist[1] / 7;
    P[158] = P[114] * dist[1] / 6;
    P[159] = P[115] * dist[1] / 5;
    P[160] = P[116] * dist[1] / 4;
    P[161] = P[117] * dist[1] / 3;
    P[162] = P[118] * dist[1] / 2;
    P[163] = P[119] * dist[1];
    P[164] = P[119] * dist[2] / 8;

    P[165] = P[120] * dist[0] / 9;
    P[166] = P[121] * dist[0] / 8;
    P[167] = P[122] * dist[0] / 8;
    P[168] = P[123] * dist[0] / 7;
    P[169] = P[124] * dist[0] / 7;
    P[170] = P[125] * dist[0] / 7;
    P[171] = P[126] * dist[0] / 6;
    P[172] = P[127] * dist[0] / 6;
    P[173] = P[128] * dist[0] / 6;
    P[174] = P[129] * dist[0] / 6;
    P[175] = P[130] * dist[0] / 5;
    P[176] = P[131] * dist[0] / 5;
    P[177] = P[132] * dist[0] / 5;
    P[178] = P[133] * dist[0] / 5;
    P[179] = P[134] * dist[0] / 5;
    P[180] = P[135] * dist[0] / 4;
    P[181] = P[136] * dist[0] / 4;
    P[182] = P[137] * dist[0] / 4;
    P[183] = P[138] * dist[0] / 4;
    P[184] = P[139] * dist[0] / 4;
    P[185] = P[140] * dist[0] / 4;
    P[186] = P[141] * dist[0] / 3;
    P[187] = P[142] * dist[0] / 3;
    P[188] = P[143] * dist[0] / 3;
    P[189] = P[144] * dist[0] / 3;
    P[190] = P[145] * dist[0] / 3;
    P[191] = P[146] * dist[0] / 3;
    P[192] = P[147] * dist[0] / 3;
    P[193] = P[148] * dist[0] / 2;
    P[194] = P[149] * dist[0] / 2;
    P[195] = P[150] * dist[0] / 2;
    P[196] = P[151] * dist[0] / 2;
    P[197] = P[152] * dist[0] / 2;
    P[198] = P[153] * dist[0] / 2;
    P[199] = P[154] * dist[0] / 2;
    P[200] = P[155] * dist[0] / 2;
    P[201] = P[156] * dist[0];
    P[202] = P[157] * dist[0];
    P[203] = P[158] * dist[0];
    P[204] = P[159] * dist[0];
    P[205] = P[160] * dist[0];
    P[206] = P[161] * dist[0];
    P[207] = P[162] * dist[0];
    P[208] = P[163] * dist[0];
    P[209] = P[164] * dist[0];
    P[210] = P[156] * dist[1] / 9;
    P[211] = P[157] * dist[1] / 8;
    P[212] = P[158] * dist[1] / 7;
    P[213] = P[159] * dist[1] / 6;
    P[214] = P[160] * dist[1] / 5;
    P[215] = P[161] * dist[1] / 4;
    P[216] = P[162] * dist[1] / 3;
    P[217] = P[163] * dist[1] / 2;
    P[218] = P[164] * dist[1];
    P[219] = P[164] * dist[2] / 9;
*/
    L = CJ->L;
    CI->L += L;

    CI->L[0] += P[1]*L[1]+P[2]*L[2]+P[3]*L[3];

    for( int i=4; i<10; ++i ) CI->L[0] += P[i]*L[i];
    CI->L[1] += P[1]*L[4]+P[2]*L[5]+P[3]*L[6];
    CI->L[2] += P[1]*L[5]+P[2]*L[7]+P[3]*L[8];
    CI->L[3] += P[1]*L[6]+P[2]*L[8]+P[3]*L[9];

    for( int i=10; i<20; ++i ) CI->L[0] += P[i]*L[i];
    CI->L[1] += P[4]*L[10]+P[5]*L[11]+P[6]*L[12]+P[7]*L[13]+P[8]*L[14]+P[9]*L[15];
    CI->L[2] += P[4]*L[11]+P[5]*L[13]+P[6]*L[14]+P[7]*L[16]+P[8]*L[17]+P[9]*L[18];
    CI->L[3] += P[4]*L[12]+P[5]*L[14]+P[6]*L[15]+P[7]*L[17]+P[8]*L[18]+P[9]*L[19];
    CI->L[4] += P[1]*L[10]+P[2]*L[11]+P[3]*L[12];
    CI->L[5] += P[1]*L[11]+P[2]*L[13]+P[3]*L[14];
    CI->L[6] += P[1]*L[12]+P[2]*L[14]+P[3]*L[15];
    CI->L[7] += P[1]*L[13]+P[2]*L[16]+P[3]*L[17];
    CI->L[8] += P[1]*L[14]+P[2]*L[17]+P[3]*L[18];
    CI->L[9] += P[1]*L[15]+P[2]*L[18]+P[3]*L[19];

/*
    for( int i=20; i<35; ++i ) CI->L[0] += P[i]*L[i];
    CI->L[1] += P[10]*L[20]+P[11]*L[21]+P[12]*L[22]+P[13]*L[23]+P[14]*L[24]+P[15]*L[25]+P[16]*L[26]+P[17]*L[27]+P[18]*L[28]+P[19]*L[29];
    CI->L[2] += P[10]*L[21]+P[11]*L[23]+P[12]*L[24]+P[13]*L[26]+P[14]*L[27]+P[15]*L[28]+P[16]*L[30]+P[17]*L[31]+P[18]*L[32]+P[19]*L[33];
    CI->L[3] += P[10]*L[22]+P[11]*L[24]+P[12]*L[25]+P[13]*L[27]+P[14]*L[28]+P[15]*L[29]+P[16]*L[31]+P[17]*L[32]+P[18]*L[33]+P[19]*L[34];
    CI->L[4] += P[4]*L[20]+P[5]*L[21]+P[6]*L[22]+P[7]*L[23]+P[8]*L[24]+P[9]*L[25];
    CI->L[5] += P[4]*L[21]+P[5]*L[23]+P[6]*L[24]+P[7]*L[26]+P[8]*L[27]+P[9]*L[28];
    CI->L[6] += P[4]*L[22]+P[5]*L[24]+P[6]*L[25]+P[7]*L[27]+P[8]*L[28]+P[9]*L[29];
    CI->L[7] += P[4]*L[23]+P[5]*L[26]+P[6]*L[27]+P[7]*L[30]+P[8]*L[31]+P[9]*L[32];
    CI->L[8] += P[4]*L[24]+P[5]*L[27]+P[6]*L[28]+P[7]*L[31]+P[8]*L[32]+P[9]*L[33];
    CI->L[9] += P[4]*L[25]+P[5]*L[28]+P[6]*L[29]+P[7]*L[32]+P[8]*L[33]+P[9]*L[34];
    CI->L[10] += P[1]*L[20]+P[2]*L[21]+P[3]*L[22];
    CI->L[11] += P[1]*L[21]+P[2]*L[23]+P[3]*L[24];
    CI->L[12] += P[1]*L[22]+P[2]*L[24]+P[3]*L[25];
    CI->L[13] += P[1]*L[23]+P[2]*L[26]+P[3]*L[27];
    CI->L[14] += P[1]*L[24]+P[2]*L[27]+P[3]*L[28];
    CI->L[15] += P[1]*L[25]+P[2]*L[28]+P[3]*L[29];
    CI->L[16] += P[1]*L[26]+P[2]*L[30]+P[3]*L[31];
    CI->L[17] += P[1]*L[27]+P[2]*L[31]+P[3]*L[32];
    CI->L[18] += P[1]*L[28]+P[2]*L[32]+P[3]*L[33];
    CI->L[19] += P[1]*L[29]+P[2]*L[33]+P[3]*L[34];

    for( int i=35; i<56; ++i ) CI->L[0] += P[i]*L[i];
    CI->L[1] += P[20]*L[35]+P[21]*L[36]+P[22]*L[37]+P[23]*L[38]+P[24]*L[39]+P[25]*L[40]+P[26]*L[41]+P[27]*L[42]+P[28]*L[43]+P[29]*L[44]+P[30]*L[45]+P[31]*L[46]+P[32]*L[47]+P[33]*L[48]+P[34]*L[49];
    CI->L[2] += P[20]*L[36]+P[21]*L[38]+P[22]*L[39]+P[23]*L[41]+P[24]*L[42]+P[25]*L[43]+P[26]*L[45]+P[27]*L[46]+P[28]*L[47]+P[29]*L[48]+P[30]*L[50]+P[31]*L[51]+P[32]*L[52]+P[33]*L[53]+P[34]*L[54];
    CI->L[3] += P[20]*L[37]+P[21]*L[39]+P[22]*L[40]+P[23]*L[42]+P[24]*L[43]+P[25]*L[44]+P[26]*L[46]+P[27]*L[47]+P[28]*L[48]+P[29]*L[49]+P[30]*L[51]+P[31]*L[52]+P[32]*L[53]+P[33]*L[54]+P[34]*L[55];
    CI->L[4] += P[10]*L[35]+P[11]*L[36]+P[12]*L[37]+P[13]*L[38]+P[14]*L[39]+P[15]*L[40]+P[16]*L[41]+P[17]*L[42]+P[18]*L[43]+P[19]*L[44];
    CI->L[5] += P[10]*L[36]+P[11]*L[38]+P[12]*L[39]+P[13]*L[41]+P[14]*L[42]+P[15]*L[43]+P[16]*L[45]+P[17]*L[46]+P[18]*L[47]+P[19]*L[48];
    CI->L[6] += P[10]*L[37]+P[11]*L[39]+P[12]*L[40]+P[13]*L[42]+P[14]*L[43]+P[15]*L[44]+P[16]*L[46]+P[17]*L[47]+P[18]*L[48]+P[19]*L[49];
    CI->L[7] += P[10]*L[38]+P[11]*L[41]+P[12]*L[42]+P[13]*L[45]+P[14]*L[46]+P[15]*L[47]+P[16]*L[50]+P[17]*L[51]+P[18]*L[52]+P[19]*L[53];
    CI->L[8] += P[10]*L[39]+P[11]*L[42]+P[12]*L[43]+P[13]*L[46]+P[14]*L[47]+P[15]*L[48]+P[16]*L[51]+P[17]*L[52]+P[18]*L[53]+P[19]*L[54];
    CI->L[9] += P[10]*L[40]+P[11]*L[43]+P[12]*L[44]+P[13]*L[47]+P[14]*L[48]+P[15]*L[49]+P[16]*L[52]+P[17]*L[53]+P[18]*L[54]+P[19]*L[55];
    CI->L[10] += P[4]*L[35]+P[5]*L[36]+P[6]*L[37]+P[7]*L[38]+P[8]*L[39]+P[9]*L[40];
    CI->L[11] += P[4]*L[36]+P[5]*L[38]+P[6]*L[39]+P[7]*L[41]+P[8]*L[42]+P[9]*L[43];
    CI->L[12] += P[4]*L[37]+P[5]*L[39]+P[6]*L[40]+P[7]*L[42]+P[8]*L[43]+P[9]*L[44];
    CI->L[13] += P[4]*L[38]+P[5]*L[41]+P[6]*L[42]+P[7]*L[45]+P[8]*L[46]+P[9]*L[47];
    CI->L[14] += P[4]*L[39]+P[5]*L[42]+P[6]*L[43]+P[7]*L[46]+P[8]*L[47]+P[9]*L[48];
    CI->L[15] += P[4]*L[40]+P[5]*L[43]+P[6]*L[44]+P[7]*L[47]+P[8]*L[48]+P[9]*L[49];
    CI->L[16] += P[4]*L[41]+P[5]*L[45]+P[6]*L[46]+P[7]*L[50]+P[8]*L[51]+P[9]*L[52];
    CI->L[17] += P[4]*L[42]+P[5]*L[46]+P[6]*L[47]+P[7]*L[51]+P[8]*L[52]+P[9]*L[53];
    CI->L[18] += P[4]*L[43]+P[5]*L[47]+P[6]*L[48]+P[7]*L[52]+P[8]*L[53]+P[9]*L[54];
    CI->L[19] += P[4]*L[44]+P[5]*L[48]+P[6]*L[49]+P[7]*L[53]+P[8]*L[54]+P[9]*L[55];
    CI->L[20] += P[1]*L[35]+P[2]*L[36]+P[3]*L[37];
    CI->L[21] += P[1]*L[36]+P[2]*L[38]+P[3]*L[39];
    CI->L[22] += P[1]*L[37]+P[2]*L[39]+P[3]*L[40];
    CI->L[23] += P[1]*L[38]+P[2]*L[41]+P[3]*L[42];
    CI->L[24] += P[1]*L[39]+P[2]*L[42]+P[3]*L[43];
    CI->L[25] += P[1]*L[40]+P[2]*L[43]+P[3]*L[44];
    CI->L[26] += P[1]*L[41]+P[2]*L[45]+P[3]*L[46];
    CI->L[27] += P[1]*L[42]+P[2]*L[46]+P[3]*L[47];
    CI->L[28] += P[1]*L[43]+P[2]*L[47]+P[3]*L[48];
    CI->L[29] += P[1]*L[44]+P[2]*L[48]+P[3]*L[49];
    CI->L[30] += P[1]*L[45]+P[2]*L[50]+P[3]*L[51];
    CI->L[31] += P[1]*L[46]+P[2]*L[51]+P[3]*L[52];
    CI->L[32] += P[1]*L[47]+P[2]*L[52]+P[3]*L[53];
    CI->L[33] += P[1]*L[48]+P[2]*L[53]+P[3]*L[54];
    CI->L[34] += P[1]*L[49]+P[2]*L[54]+P[3]*L[55];
*/

  }

  void L2P(C_iter CI) const {
    for( B_iter B=CI->LEAF; B!=CI->LEAF+CI->NCLEAF; ++B ) {
      vect dist = B->X - CI->X;
      Lset P, L;
      P[0] = 1;
  
      P[1] = P[0] * dist[0];
      P[2] = P[0] * dist[1];
      P[3] = P[0] * dist[2];
  
      P[4] = P[1] * dist[0] / 2;
      P[5] = P[2] * dist[0];
      P[6] = P[3] * dist[0];
      P[7] = P[2] * dist[1] / 2;
      P[8] = P[3] * dist[1];
      P[9] = P[3] * dist[2] / 2;
  
      P[10] = P[4] * dist[0] / 3;
      P[11] = P[5] * dist[0] / 2;
      P[12] = P[6] * dist[0] / 2;
      P[13] = P[7] * dist[0];
      P[14] = P[8] * dist[0];
      P[15] = P[9] * dist[0];
      P[16] = P[7] * dist[1] / 3;
      P[17] = P[8] * dist[1] / 2;
      P[18] = P[9] * dist[1];
      P[19] = P[9] * dist[2] / 3;
  
/*
      P[20] = P[10] * dist[0] / 4;
      P[21] = P[11] * dist[0] / 3;
      P[22] = P[12] * dist[0] / 3;
      P[23] = P[13] * dist[0] / 2;
      P[24] = P[14] * dist[0] / 2;
      P[25] = P[15] * dist[0] / 2;
      P[26] = P[16] * dist[0];
      P[27] = P[17] * dist[0];
      P[28] = P[18] * dist[0];
      P[29] = P[19] * dist[0];
      P[30] = P[16] * dist[1] / 4;
      P[31] = P[17] * dist[1] / 3;
      P[32] = P[18] * dist[1] / 2;
      P[33] = P[19] * dist[1];
      P[34] = P[19] * dist[2] / 4;
  
      P[35] = P[20] * dist[0] / 5;
      P[36] = P[21] * dist[0] / 4;
      P[37] = P[22] * dist[0] / 4;
      P[38] = P[23] * dist[0] / 3;
      P[39] = P[24] * dist[0] / 3;
      P[40] = P[25] * dist[0] / 3;
      P[41] = P[26] * dist[0] / 2;
      P[42] = P[27] * dist[0] / 2;
      P[43] = P[28] * dist[0] / 2;
      P[44] = P[29] * dist[0] / 2;
      P[45] = P[30] * dist[0];
      P[46] = P[31] * dist[0];
      P[47] = P[32] * dist[0];
      P[48] = P[33] * dist[0];
      P[49] = P[34] * dist[0];
      P[50] = P[30] * dist[1] / 5;
      P[51] = P[31] * dist[1] / 4;
      P[52] = P[32] * dist[1] / 3;
      P[53] = P[33] * dist[1] / 2;
      P[54] = P[34] * dist[1];
      P[55] = P[34] * dist[2] / 5;
  
      P[56] = P[35] * dist[0] / 6;
      P[57] = P[36] * dist[0] / 5;
      P[58] = P[37] * dist[0] / 5;
      P[59] = P[38] * dist[0] / 4;
      P[60] = P[39] * dist[0] / 4;
      P[61] = P[40] * dist[0] / 4;
      P[62] = P[41] * dist[0] / 3;
      P[63] = P[42] * dist[0] / 3;
      P[64] = P[43] * dist[0] / 3;
      P[65] = P[44] * dist[0] / 3;
      P[66] = P[45] * dist[0] / 2;
      P[67] = P[46] * dist[0] / 2;
      P[68] = P[47] * dist[0] / 2;
      P[69] = P[48] * dist[0] / 2;
      P[70] = P[49] * dist[0] / 2;
      P[71] = P[50] * dist[0];
      P[72] = P[51] * dist[0];
      P[73] = P[52] * dist[0];
      P[74] = P[53] * dist[0];
      P[75] = P[54] * dist[0];
      P[76] = P[55] * dist[0];
      P[77] = P[50] * dist[1] / 6;
      P[78] = P[51] * dist[1] / 5;
      P[79] = P[52] * dist[1] / 4;
      P[80] = P[53] * dist[1] / 3;
      P[81] = P[54] * dist[1] / 2;
      P[82] = P[55] * dist[1];
      P[83] = P[55] * dist[2] / 6;
  
      P[84] = P[56] * dist[0] / 7;
      P[85] = P[57] * dist[0] / 6;
      P[86] = P[58] * dist[0] / 6;
      P[87] = P[59] * dist[0] / 5;
      P[88] = P[60] * dist[0] / 5;
      P[89] = P[61] * dist[0] / 5;
      P[90] = P[62] * dist[0] / 4;
      P[91] = P[63] * dist[0] / 4;
      P[92] = P[64] * dist[0] / 4;
      P[93] = P[65] * dist[0] / 4;
      P[94] = P[66] * dist[0] / 3;
      P[95] = P[67] * dist[0] / 3;
      P[96] = P[68] * dist[0] / 3;
      P[97] = P[69] * dist[0] / 3;
      P[98] = P[70] * dist[0] / 3;
      P[99] = P[71] * dist[0] / 2;
      P[100] = P[72] * dist[0] / 2;
      P[101] = P[73] * dist[0] / 2;
      P[102] = P[74] * dist[0] / 2;
      P[103] = P[75] * dist[0] / 2;
      P[104] = P[76] * dist[0] / 2;
      P[105] = P[77] * dist[0];
      P[106] = P[78] * dist[0];
      P[107] = P[79] * dist[0];
      P[108] = P[80] * dist[0];
      P[109] = P[81] * dist[0];
      P[110] = P[82] * dist[0];
      P[111] = P[83] * dist[0];
      P[112] = P[77] * dist[1] / 7;
      P[113] = P[78] * dist[1] / 6;
      P[114] = P[79] * dist[1] / 5;
      P[115] = P[80] * dist[1] / 4;
      P[116] = P[81] * dist[1] / 3;
      P[117] = P[82] * dist[1] / 2;
      P[118] = P[83] * dist[1];
      P[119] = P[83] * dist[2] / 7;
  
      P[120] = P[84] * dist[0] / 8;
      P[121] = P[85] * dist[0] / 7;
      P[122] = P[86] * dist[0] / 7;
      P[123] = P[87] * dist[0] / 6;
      P[124] = P[88] * dist[0] / 6;
      P[125] = P[89] * dist[0] / 6;
      P[126] = P[90] * dist[0] / 5;
      P[127] = P[91] * dist[0] / 5;
      P[128] = P[92] * dist[0] / 5;
      P[129] = P[93] * dist[0] / 5;
      P[130] = P[94] * dist[0] / 4;
      P[131] = P[95] * dist[0] / 4;
      P[132] = P[96] * dist[0] / 4;
      P[133] = P[97] * dist[0] / 4;
      P[134] = P[98] * dist[0] / 4;
      P[135] = P[99] * dist[0] / 3;
      P[136] = P[100] * dist[0] / 3;
      P[137] = P[101] * dist[0] / 3;
      P[138] = P[102] * dist[0] / 3;
      P[139] = P[103] * dist[0] / 3;
      P[140] = P[104] * dist[0] / 3;
      P[141] = P[105] * dist[0] / 2;
      P[142] = P[106] * dist[0] / 2;
      P[143] = P[107] * dist[0] / 2;
      P[144] = P[108] * dist[0] / 2;
      P[145] = P[109] * dist[0] / 2;
      P[146] = P[110] * dist[0] / 2;
      P[147] = P[111] * dist[0] / 2;
      P[148] = P[112] * dist[0];
      P[149] = P[113] * dist[0];
      P[150] = P[114] * dist[0];
      P[151] = P[115] * dist[0];
      P[152] = P[116] * dist[0];
      P[153] = P[117] * dist[0];
      P[154] = P[118] * dist[0];
      P[155] = P[119] * dist[0];
      P[156] = P[112] * dist[1] / 8;
      P[157] = P[113] * dist[1] / 7;
      P[158] = P[114] * dist[1] / 6;
      P[159] = P[115] * dist[1] / 5;
      P[160] = P[116] * dist[1] / 4;
      P[161] = P[117] * dist[1] / 3;
      P[162] = P[118] * dist[1] / 2;
      P[163] = P[119] * dist[1];
      P[164] = P[119] * dist[2] / 8;
  
      P[165] = P[120] * dist[0] / 9;
      P[166] = P[121] * dist[0] / 8;
      P[167] = P[122] * dist[0] / 8;
      P[168] = P[123] * dist[0] / 7;
      P[169] = P[124] * dist[0] / 7;
      P[170] = P[125] * dist[0] / 7;
      P[171] = P[126] * dist[0] / 6;
      P[172] = P[127] * dist[0] / 6;
      P[173] = P[128] * dist[0] / 6;
      P[174] = P[129] * dist[0] / 6;
      P[175] = P[130] * dist[0] / 5;
      P[176] = P[131] * dist[0] / 5;
      P[177] = P[132] * dist[0] / 5;
      P[178] = P[133] * dist[0] / 5;
      P[179] = P[134] * dist[0] / 5;
      P[180] = P[135] * dist[0] / 4;
      P[181] = P[136] * dist[0] / 4;
      P[182] = P[137] * dist[0] / 4;
      P[183] = P[138] * dist[0] / 4;
      P[184] = P[139] * dist[0] / 4;
      P[185] = P[140] * dist[0] / 4;
      P[186] = P[141] * dist[0] / 3;
      P[187] = P[142] * dist[0] / 3;
      P[188] = P[143] * dist[0] / 3;
      P[189] = P[144] * dist[0] / 3;
      P[190] = P[145] * dist[0] / 3;
      P[191] = P[146] * dist[0] / 3;
      P[192] = P[147] * dist[0] / 3;
      P[193] = P[148] * dist[0] / 2;
      P[194] = P[149] * dist[0] / 2;
      P[195] = P[150] * dist[0] / 2;
      P[196] = P[151] * dist[0] / 2;
      P[197] = P[152] * dist[0] / 2;
      P[198] = P[153] * dist[0] / 2;
      P[199] = P[154] * dist[0] / 2;
      P[200] = P[155] * dist[0] / 2;
      P[201] = P[156] * dist[0];
      P[202] = P[157] * dist[0];
      P[203] = P[158] * dist[0];
      P[204] = P[159] * dist[0];
      P[205] = P[160] * dist[0];
      P[206] = P[161] * dist[0];
      P[207] = P[162] * dist[0];
      P[208] = P[163] * dist[0];
      P[209] = P[164] * dist[0];
      P[210] = P[156] * dist[1] / 9;
      P[211] = P[157] * dist[1] / 8;
      P[212] = P[158] * dist[1] / 7;
      P[213] = P[159] * dist[1] / 6;
      P[214] = P[160] * dist[1] / 5;
      P[215] = P[161] * dist[1] / 4;
      P[216] = P[162] * dist[1] / 3;
      P[217] = P[163] * dist[1] / 2;
      P[218] = P[164] * dist[1];
      P[219] = P[164] * dist[2] / 9;
*/
      L = CJ->L;

      B->TRG /= B->SRC[0];

      B->TRG[0] -= L[0]+P[1]*L[1]+P[2]*L[2]+P[3]*L[3];
      B->TRG[1] += L[1];
      B->TRG[2] += L[2];
      B->TRG[3] += L[3];

      B->TRG[0] -= P[4]*L[4]+P[5]*L[5]+P[6]*L[6]+P[7]*L[7]+P[8]*L[8]+P[9]*L[9];
      B->TRG[1] += P[1]*L[4]+P[2]*L[5]+P[3]*L[6];
      B->TRG[2] += P[1]*L[5]+P[2]*L[7]+P[3]*L[8];
      B->TRG[3] += P[1]*L[6]+P[2]*L[8]+P[3]*L[9];

      for( int i=10; i<20; ++i ) B->TRG[0] -= P[i]*L[i];
      B->TRG[1] += P[4]*L[10]+P[5]*L[11]+P[6]*L[12]+P[7]*L[13]+P[8]*L[14]+P[9]*L[15];
      B->TRG[2] += P[4]*L[11]+P[5]*L[13]+P[6]*L[14]+P[7]*L[16]+P[8]*L[17]+P[9]*L[18];
      B->TRG[3] += P[4]*L[12]+P[5]*L[14]+P[6]*L[15]+P[7]*L[17]+P[8]*L[18]+P[9]*L[19];

/*
      for( int i=20; i<35; ++i ) B->TRG[0] -= P[i]*L[i];
      B->TRG[1] += P[10]*L[20]+P[11]*L[21]+P[12]*L[22]+P[13]*L[23]+P[14]*L[24]+P[15]*L[25]+P[16]*L[26]+P[17]*L[27]+P[18]*L[28]+P[19]*L[29];
      B->TRG[2] += P[10]*L[21]+P[11]*L[23]+P[12]*L[24]+P[13]*L[26]+P[14]*L[27]+P[15]*L[28]+P[16]*L[30]+P[17]*L[31]+P[18]*L[32]+P[19]*L[33];
      B->TRG[3] += P[10]*L[22]+P[11]*L[24]+P[12]*L[25]+P[13]*L[27]+P[14]*L[28]+P[15]*L[29]+P[16]*L[31]+P[17]*L[32]+P[18]*L[33]+P[19]*L[34];
  
      for( int i=35; i<56; ++i ) B->TRG[0] -= P[i]*L[i];
      B->TRG[1] += P[20]*L[35]+P[21]*L[36]+P[22]*L[37]+P[23]*L[38]+P[24]*L[39]+P[25]*L[40]+P[26]*L[41]+P[27]*L[42]+P[28]*L[43]+P[29]*L[44]+P[30]*L[45]+P[31]*L[46]+P[32]*L[47]+P[33]*L[48]+P[34]*L[49];
      B->TRG[2] += P[20]*L[36]+P[21]*L[38]+P[22]*L[39]+P[23]*L[41]+P[24]*L[42]+P[25]*L[43]+P[26]*L[45]+P[27]*L[46]+P[28]*L[47]+P[29]*L[48]+P[30]*L[50]+P[31]*L[51]+P[32]*L[52]+P[33]*L[53]+P[34]*L[54];
      B->TRG[3] += P[20]*L[37]+P[21]*L[39]+P[22]*L[40]+P[23]*L[42]+P[24]*L[43]+P[25]*L[44]+P[26]*L[46]+P[27]*L[47]+P[28]*L[48]+P[29]*L[49]+P[30]*L[51]+P[31]*L[52]+P[32]*L[53]+P[33]*L[54]+P[34]*L[55];
*/
    }
  }
};

#endif
