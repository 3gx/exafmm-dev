.SUFFIXES: .cxx .cu .o

### choose kernel
EQUATION = Laplace
#EQUATION = Matern
#EQUATION = Yukawa (not available yet)
#EQUATION = Helmholtz (not available yet)
#EQUATION = Stokes (not available yet)

### choose basis of multipole/local expansion
BASIS	= Cartesian
#BASIS	= Spherical
#BASIS	= Planewave (not available yet)

### choose device to use
DEVICE	= CPU
#DEVICE	= GPU (not integrated)

### choose compiler
CXX	= mpicxx -ggdb3 -Wall -Wextra -O3 -msse4a -ffast-math -funroll-loops # GCC
#CXX	= mpicxx -Wall -xHOST -O3 -funroll-loops -finline-functions -ansi-alias # Intel
#CXX	= icpc -Wall -mmic -O3 -L/opt/intel/tbb/lib/mic -lpthread # Intel MIC
#CXX	= mpixlcxx_r -qarch=450 -qtune=450 -O3 # BG/P
#CXX	= tau_cxx.sh # TAU compiler instrumentation

### Base flags
CXX	+= -I../include
LFLAGS	+= -D$(BASIS)
LFLAGS  += -DEXPANSION=3 # Specifcy expansion order
ifeq ($(BASIS),Cartesian)
LFLAGS	+= -DCOMcenter # Use center of mass as center of expansion
LFLAGS	+= -DCOMkernel # Use center of mass kernel that skips dipoles (Use with -DCOMcenter)
endif
LFLAGS	+= -DERROR_OPT # Use error optimized theta
LFLAGS	+= -DUSE_BMAX # Use Bmax in multipole acceptance criteria
LFLAGS	+= -DUSE_RMAX # Use Rmax in multipole acceptance criteria
LFLAGS	+= -DDUAL # Use dual tree traversal (turn off every option above before turning this off)
#LFLAGS	+= -DAUTO # Use autotuned selection between P2P or M2L (needs improvement)
#LFLAGS	+= -DFP64 # Use double precision
#LFLAGS	+= -DKAHAN # Use Kahan summation   

### Debugging flags
LFLAGS	+= -DASSERT # Turns on asserttions (otherwise define an empty macro function)
#LFLAGS	+= -DCOUNT # Count number calls to P2P and M2L

### Intel TBB flags : TBB is available from http://threadingbuildingblocks.org/download.php
LFLAGS	+= -std=c++0x -DTBB -ltbb

### MassiveThreads flags : MassiveThreads is available from http://code.google.com/p/massivethreads/
#LFLAGS	+= -std=c++0x -DMTHREAD -lmyth 

### OpenMP flags (not recommended, slow) : OpenMP3.0 is available in gcc>=4.3.1, icc>=11.0
#LFLAGS += -DOPENMP -fopenmp

### PAPI flags : set environment value to (export EXAFMM_PAPI_EVENTS="PAPI_L2_DCM,PAPI_L2_DCA,PAPI_TLB_DM") or something else
#LFLAGS	+= -DPAPI -lpapi

### Trace flags
#LFLAGS	+= -DTRACE

### VTK flags : VTK is available from http://www.vtk.org/VTK/resources/software.html
#VTK_INCLUDE_PATH = /usr/include/vtk-5.8
#VTK_LIBRARY_PATH = /usr/lib/vtk-5.8
#CXX	+= -I$(VTK_INCLUDE_PATH)
#LFLAGS	+= -L$(VTK_LIBRARY_PATH) -DVTK -lvtkCharts -lvtkRendering -lvtkGraphics -lvtkFiltering -lvtkViews -lvtkCommon -lvtkWidgets -lvtkIO

ifeq ($(DEVICE),GPU)
### CUDA path
CUDA_INSTALL_PATH = /usr/local/cuda
CUDA_SDK_PATH = /usr/local/cuda_sdk/C
### CUDA compiler
NVCC	= nvcc -Xcompiler -fopenmp --ptxas-options=-v -O3 -use_fast_math -arch=sm_21 -I../include -I$(CUDA_INSTALL_PATH)/include
### CUDA flags
LFLAGS  += -L$(CUDA_INSTALL_PATH)/lib64 -lcuda -lcudart -lstdc++ -ldl -lm
SOURCES	= ../kernels/$(EQUATION)$(BASIS)$(DEVICE).cu ../kernels/$(EQUATION)P2P$(DEVICE).cu
OBJECTS	= $(SOURCES:.cu=.o)
else
SOURCES	= ../kernels/$(EQUATION)$(BASIS)$(DEVICE).cxx ../kernels/$(EQUATION)P2P$(DEVICE).cxx
OBJECTS	= $(SOURCES:.cxx=.o)
endif

.cxx.o  :
	$(CXX) -c $^ -o $@ $(LFLAGS)
.cu.o   :
	$(NVCC) -c $^ -o $@ $(LFLAGS)

help:
	@make -C .. help
clean:
	@make -C .. clean
cleandat:
	@make -C .. cleandat
cleanlib:
	@make -C .. cleanlib
cleanall:
	@make -C .. cleanall
commit:
	@make -C .. commit
save:
	@make -C .. save
revert:
	@make -C .. revert
